package com.imac.xgboost;

import java.util.Arrays;
import java.util.HashMap;

import javax.annotation.Tainted;

import ml.dmlc.xgboost4j.java.Booster;
import ml.dmlc.xgboost4j.java.DMatrix;
import ml.dmlc.xgboost4j.java.XGBoost;
import ml.dmlc.xgboost4j.java.XGBoostError;
//import ml.dmlc.xgboost4j.scala.spark.XGBoost;

public class BoostFromPrediction {
  public static void main(String[] args) throws XGBoostError {
    System.out.println("start running example to start from a initial prediction");

    // load file from text file, also binary buffer generated by xgboost4j
    String trainData = args[0];
    String testData = args[1];
    
    DMatrix trainMat = new DMatrix(trainData);
    DMatrix testMat = new DMatrix(testData);

    //specify parameters
    HashMap<String, Object> params = new HashMap<String, Object>();
    params.put("eta", 1.0);
    params.put("max_depth", 2);
    params.put("silent", 1);
    params.put("objective", "binary:logistic");

    //specify watchList
    HashMap<String, DMatrix> watches = new HashMap<String, DMatrix>();
    watches.put("train", trainMat);
    watches.put("test", testMat);

    //train xgboost for 1 round
    Booster booster = XGBoost.train(trainMat, params, 1, watches, null, null);
    
    float[][] trainPred = booster.predict(trainMat, true);
    float[][] testPred = booster.predict(testMat, true);
    int count =0;
//    System.out.println(trainPred.length);
//    System.out.println(trainMat.getLabel().length);
    for(int i=0 ; i < trainPred.length-1 ; i++){
    	if(trainPred[i][0] == trainMat.getLabel()[i]){
    		count++;
    	}else{
    		System.out.println(trainPred[i][0]+"		"+trainMat.getLabel()[i]);
    	}
    	
    }    
    System.out.println(count/(double)trainPred.length);
    System.out.println(trainPred.length);
    System.out.println(count);
    
    
//    System.out.println(count/(double)trainData.length());
    
//    System.out.println("Test : ------------------ \n"+Arrays.asList(testPred));
    
    trainMat.setBaseMargin(trainPred);
    testMat.setBaseMargin(testPred);
//
//    System.out.println("result of running from initial prediction");
//    Booster booster2 = XGBoost.train(trainMat, params, 1, watches, null, null);
//    float[][]  leafindex = booster.predictLeaf(testMat, 0);
//    for (float[] leafs : leafindex) {
//      System.out.println(Arrays.toString(leafs));
//    }
    
//    float[][] trainPred2 = booster2.predict(trainMat, true);
//    float[][] testPred2 = booster2.predict(testMat, true);
//    
//    trainMat.setBaseMargin(trainPred2);
//    testMat.setBaseMargin(testPred2);
//    
//    Booster booster3 = XGBoost.train(trainMat, params, 1, watches, null, null);
    
    
  }
}